filtered_protests <- protests[high_level_purpose == purpose, position_taken]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education",)
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose, str_detect(purpose, position_taken)]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education",)
filter_positions("Education", "Budget")
filter_positions("Education", "Budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken == TRUE)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose, str_detect(purpose, position_taken)]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "Budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken) == TRUE)) {
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken) == TRUE) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose, str_detect(purpose, position_taken)]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "Budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken) == TRUE) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose, position_taken]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "Budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken) == TRUE) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose, position_taken]
}
df <- data.frame(filtered_protests)
return (df)
}
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose, position_taken]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", )
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
df <- data.frame(filtered_protests)
} else {
df <- df[high_level_purpose == given_purpose, str_detect(protests$Tags, position_taken)]
}
return (df)
}
filter_positions("Education", )
filter_positions("Education", "Buget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
df <- data.frame(filtered_protests)
} else {
df <- df[high_level_purpose == given_purpose, str_detect(protests$Tags, position_taken), ]
}
return (df)
}
filter_positions("Education", "Buget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose, str_detect(protests$Tags, position_taken), ]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "Buget")
filter_positions("Education", "Budget")
filter_positions("Education", "budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose, str_detect(protests$Tags, position_taken), ]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
filter_positions("Education", "budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose, str_detect(protests$Tags, position_taken)]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[(protests['purpose'] == purpose) & (protests['position_taken'] == position_taken)]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests %>%
filter(high_level_purpose == given_purpose & str_detect(Tags, position_taken))
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests %>%
filter(high_level_purpose == given_purpose & str_detect(protests$Tags, position_taken))
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose & str_detect(protests$Tags, position_taken)]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
if (str_detect(protests$Tags, position_taken)) {
filtered_protests <- protests[high_level_purpose == given_purpose, position_taken]
} else {
filter_protests <- NULL
}
}
df <- data.frame(filtered_protests)
return (df)
}
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
if (str_detect(protests$Tags, position_taken)) {
filtered_protests <- protests[high_level_purpose == given_purpose, position_taken]
} else {
filter_protests <- NULL
}
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
if (str_detect(protests$Tags, position_taken) == TRUE) {
filtered_protests <- protests[high_level_purpose == given_purpose, position_taken]
} else {
filter_protests <- NULL
}
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose, position_taken]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
filter_positions <- function(purpose, position_taken=NULL){
purpose <- protests$Event..legacy..see.tags.
position_taken <- protests$Tags
df_purposes <- data.frame(purpose, position_taken)
if(!is.null(position_taken)){
return(df_purposes)
}
return(data.frame(protests))
}
filter_positions("Education", "budget")
source("~/Desktop/UW/INFO/INFO 201/Info201code/assignment-02-info201su-kaiyun18/analysis.R")
filter_positions <- function(purpose, position_taken=NULL) {
if (is.null(position_taken)) {
filtered_protests <- protests[protests$Purpose == purpose, ]
}
else {
filtered_protests <- protests[protests$Purpose == purpose & protests$Position == position_taken, ]
}
if(nrow(filtered_protests) == 0){
print(paste("No protests found for the purpose: ", purpose, " with position: ", position_taken))
return(NULL)
}
return(filtered_protests)
}
filter_positions("Education", "budget")
filter_positions <- function(purpose, position_taken=NULL) {
if (is.null(position_taken)) {
filtered_protests <- protests[protests$Purpose == purpose, ]
}
else {
filtered_protests <- protests[protests$Purpose == purpose & protests$Position == position_taken, ]
}
if(nrow(filtered_protests) == 0){
print(paste("No protests found for the purpose: ", purpose, " with position: ", position_taken))
return(NULL)
}
return(filtered_protests)
}
filter_positions("Education", "budget")
filter_positions("Education", "Against budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose & str_detect(protests$Tags, position_taken) == True, ]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose & str_detect(protests$Tags, position_taken) == TRUE, ]
}
df <- data.frame(filtered_protests)
return (df)
}
filter_positions("Education", "budget")
# 6b: Write the filter_and_report() function, as described above. Please comment
#    your function. (Variable: `filter_and_report`)
filter_and_report <- function(purpose, position_takens = NULL) {
filtered_protests <- filter_positions(purpose, position_taken)
formatted_report <- format_doc(filtered_protests)
return(formatted_report)
}
filter_and_report("Education", "budget")
# 6b: Write the filter_and_report() function, as described above. Please comment
#    your function. (Variable: `filter_and_report`)
filter_and_report <- function(given_purpose, position_taken = NULL) {
filtered_protests <- filter_positions(given_purpose, position_taken)
formatted_report <- format_doc(filtered_protests)
return(formatted_report)
}
filter_and_report("Education", "budget")
# rpractice / ps-1
#
# A2: Assignment 2 (A2)
#    INFO-201 (Autumn 2022)
#    kaiyun04@uw.edu
# Practice set info ----
practice.begin("A2", learner="Kaiyun Zheng", email="kaiyun04@uw.edu")
format_doc <- function(protest_df, purpose, position_taken=NULL) {
# Heading components
heading1 <- paste("# Protest purpose: ", purpose, "\n")
heading2 <- "\n"
if (!is.null(position_taken)) {
heading2 <- paste("## Position taken: ", position_taken, "\n")
}
# Summary component
num_protests <- format(nrow(protest_df), big.mark=",")
total_attendees <- format(sum(protest_df$Attendees, na.rm=TRUE), big.mark=",")
summary <- paste0("_Summary_\n\n",
"* Number of Protests: ", num_protests, "\n",
"* Total Attendees: ", total_attendees, "\n\n",
"_List of Protests (Attendees)_\n\n")
# List of protests component (Note: Bullet_list is a vector)
bullet_list <- paste0("* ", protest_df$Date, ": ", protest_df$Location,
" [Article](", protest_df$Source, ")", " (_", protest_df$Attendees, "_)\n")
# Collapse the vector into a string
url_str <- paste0(bullet_list, collapse="")
# Paste together each of the report components
md_doc <- paste0(heading1, heading2, summary, url_str)
return(md_doc)
}
# A helper function to write the report to a file
# NOTE: Check and update the filename for your machine
write_report <- function(md_doc, fname="~/Documents/info201/reports/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
}
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(given_purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == given_purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == given_purpose & str_detect(protests$Tags, position_taken) == TRUE, ]
}
df <- data.frame(filtered_protests)
return (df)
}
# 6b: Write the filter_and_report() function, as described above. Please comment
#    your function. (Variable: `filter_and_report`)
filter_and_report <- function(given_purpose, position_taken = NULL) {
filtered_protests <- filter_positions(given_purpose, position_taken)
formatted_report <- format_doc(filtered_protests)
return(formatted_report)
}
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filter_positions("Education", "budget")
filter_and_report("Education", "budget")
filter_and_report("Education", "budget")
format_doc <- function(protest_df, purpose, position_taken=NULL) {
# Heading components
heading1 <- paste("# Protest purpose: ", purpose, "\n")
heading2 <- "\n"
if (!is.null(position_taken)) {
heading2 <- paste("## Position taken: ", position_taken, "\n")
}
# Summary component
num_protests <- format(nrow(protest_df), big.mark=",")
total_attendees <- format(sum(protest_df$Attendees, na.rm=TRUE), big.mark=",")
summary <- paste0("_Summary_\n\n",
"* Number of Protests: ", num_protests, "\n",
"* Total Attendees: ", total_attendees, "\n\n",
"_List of Protests (Attendees)_\n\n")
# List of protests component (Note: Bullet_list is a vector)
bullet_list <- paste0("* ", protest_df$Date, ": ", protest_df$Location,
" [Article](", protest_df$Source, ")", " (_", protest_df$Attendees, "_)\n")
# Collapse the vector into a string
url_str <- paste0(bullet_list, collapse="")
# Paste together each of the report components
md_doc <- paste0(heading1, heading2, summary, url_str)
return(md_doc)
}
# A helper function to write the report to a file
# NOTE: Check and update the filename for your machine
write_report <- function(md_doc, fname="~/Documents/info201/reports/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
}
# 6a: Write the filter_positions() function, as described above. Please comment
#    your function. (Variable: `filter_protests`)
filter_positions <- function(purpose, position_taken = NULL) {
#if there's no position_taken variable given
if (is.null(position_taken)) {
#then the filtered protests won't need to consider position_taken
filtered_protests <- protests[high_level_purpose == purpose, ]
} else {
filtered_protests <- protests[high_level_purpose == purpose & str_detect(protests$Tags, position_taken) == TRUE, ]
}
df <- data.frame(filtered_protests)
return (df)
}
# 6b: Write the filter_and_report() function, as described above. Please comment
#    your function. (Variable: `filter_and_report`)
filter_and_report <- function(purpose, position_taken = NULL) {
filtered_protests <- filter_positions(purpose, position_taken)
formatted_report <- format_doc(filtered_protests)
return(formatted_report)
}
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filter_positions("Education", "budget")
filter_and_report("Education", "budget")
filter_and_report("Education", "budget")
# 6b: Write the filter_and_report() function, as described above. Please comment
#    your function. (Variable: `filter_and_report`)
filter_and_report <- function(purpose, position_taken = NULL) {
filtered_protests <- filter_positions(purpose, position_taken)
formatted_report <- format_doc(filtered_protests, purpose, position_taken=NULL)
return(formatted_report)
}
filter_and_report("Education", "budget")
